name: CI

on:
  push:
    branches:
      - master
      - main
  pull_request:

env:
  SPRING_PROFILES_ACTIVE: prod
  APP_SECRET_KEY: test-ci-secret-should-be-at-least-32-chars!!
  APP_EXPIRATION_TIME: 3600000

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Make Maven Wrapper executable
        run: chmod +x mvnw

      - name: Run tests
        run: ./mvnw -B clean test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Make Maven Wrapper executable
        run: chmod +x mvnw

      - name: Package application
        run: ./mvnw -B clean package -DskipTests

      - name: Archive packaged jar
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: gdd-api-jar
          path: target/gdd-api-*.jar

  deploy:
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    env:
      DEPLOY_HOST: ${{ secrets.HOSTINGER_HOST }}
      DEPLOY_PORT: ${{ secrets.HOSTINGER_PORT || '22' }}
      DEPLOY_USER: ${{ secrets.HOSTINGER_USER }}
      DEPLOY_TARGET_DIR: ${{ secrets.HOSTINGER_APP_DIR }}
      DEPLOY_SERVICE: ${{ secrets.HOSTINGER_SERVICE_NAME }}
      DEPLOY_SERVICE_USER: ${{ secrets.HOSTINGER_SERVICE_USER }}
      DEPLOY_SERVICE_GROUP: ${{ secrets.HOSTINGER_SERVICE_GROUP }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: gdd-api-jar
          path: build

      - name: Prepare SSH key
        run: |
          whoami
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/hostinger
          chmod 600 ~/.ssh/hostinger
          ssh-keyscan -p "$DEPLOY_PORT" "$DEPLOY_HOST" >> ~/.ssh/known_hosts

      - name: Transfer artifact and deploy script
        run: |
          scp -i ~/.ssh/hostinger -P "$DEPLOY_PORT" build/gdd-api-*.jar "$DEPLOY_USER@$DEPLOY_HOST:/tmp/gdd-api.jar"
          scp -i ~/.ssh/hostinger -P "$DEPLOY_PORT" scripts/remote/deploy-gdd-api.sh "$DEPLOY_USER@$DEPLOY_HOST:/tmp/deploy-gdd-api.sh"

      - name: Check remote sudo
        run: |
          ssh -i ~/.ssh/hostinger -p "$DEPLOY_PORT" "$DEPLOY_USER@$DEPLOY_HOST" "set -euo pipefail; echo Remote user: \$(whoami); sudo -n systemctl status \"$DEPLOY_SERVICE\" --no-pager"

      - name: Restart application service
        run: |
          ssh -i ~/.ssh/hostinger -p "$DEPLOY_PORT" "$DEPLOY_USER@$DEPLOY_HOST" \
            "APP_DIR='${DEPLOY_TARGET_DIR}' SERVICE_NAME='${DEPLOY_SERVICE}' SERVICE_USER='${DEPLOY_SERVICE_USER}' SERVICE_GROUP='${DEPLOY_SERVICE_GROUP}' bash /tmp/deploy-gdd-api.sh"

      - name: Cleanup temporary files on remote host
        if: always()
        run: |
          ssh -i ~/.ssh/hostinger -p "$DEPLOY_PORT" "$DEPLOY_USER@$DEPLOY_HOST" "rm -f /tmp/deploy-gdd-api.sh"
