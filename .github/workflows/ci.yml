name: CI

on:
  push:
    branches:
      - master
      - main
  pull_request:

env:
  SPRING_PROFILES_ACTIVE: test
  APP_SECRET_KEY: test-ci-secret-should-be-at-least-32-chars!!
  APP_EXPIRATION_TIME: 3600000

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Make Maven Wrapper executable
        run: chmod +x mvnw

      - name: Run tests
        run: ./mvnw -B clean test

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,enable=true,value=${{ github.sha }}
            type=ref,event=branch,enable=${{ github.event_name != 'pull_request' }}
          flavor: |
            latest=true

      - name: Login to GHCR
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    environment:
      name: production
    env:
      DEPLOY_HOST: ${{ secrets.HOSTINGER_HOST }}
      DEPLOY_PORT: ${{ secrets.HOSTINGER_PORT }}
      DEPLOY_USER: ${{ secrets.HOSTINGER_USER }}
      DEPLOY_TARGET_DIR: ${{ secrets.HOSTINGER_APP_DIR }}
      REGISTRY_USER: ${{ secrets.HOSTINGER_REGISTRY_USER }}
      REGISTRY_TOKEN: ${{ secrets.HOSTINGER_REGISTRY_TOKEN }}
    steps:
      - name: Resolve image name
        id: image
        run: |
          IMAGE="ghcr.io/${GITHUB_REPOSITORY}"
          IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          echo "uri=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Prepare SSH key
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/hostinger
          chmod 600 ~/.ssh/hostinger
          PORT=${DEPLOY_PORT:-22}
          ssh-keyscan -p "$PORT" "$DEPLOY_HOST" >> ~/.ssh/known_hosts

      - name: Deploy to Hostinger
        env:
          PORT: ${{ env.DEPLOY_PORT }}
          DEPLOY_BRANCH: ${{ github.ref_name }}
          DEPLOY_IMAGE: ${{ steps.image.outputs.uri }}:${{ github.sha }}
        run: |
          set -euo pipefail
          PORT=${PORT:-22}
          ssh -i ~/.ssh/hostinger -p "$PORT" "$DEPLOY_USER@$DEPLOY_HOST" "set -euo pipefail; cd '$DEPLOY_TARGET_DIR'; if [ -d .git ]; then git fetch --depth=1 origin '$DEPLOY_BRANCH'; git reset --hard 'origin/$DEPLOY_BRANCH'; fi; if [ -n '$REGISTRY_USER' ] && [ -n '$REGISTRY_TOKEN' ]; then echo '$REGISTRY_TOKEN' | docker login ghcr.io -u '$REGISTRY_USER' --password-stdin; fi; APP_IMAGE='$DEPLOY_IMAGE' docker compose --env-file .env pull app; APP_IMAGE='$DEPLOY_IMAGE' docker compose --env-file .env up -d --remove-orphans; if [ -n '$REGISTRY_USER' ] && [ -n '$REGISTRY_TOKEN' ]; then docker logout ghcr.io; fi"
